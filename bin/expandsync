#!/usr/bin/env ruby

require 'csv'
require 'expandsync'
require 'methadone'
require 'nokogiri'
require 'optparse'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |atext_filepath|
    begin
      # Collect snippets from both aText and TextExpander and create an
      # array with the unique entries of both.
      atext = AText.new(atext_filepath)
      textexpander = TextExpander.new(options[:t] || ExpandSync::DEFAULT_TE_SNIPPET_PATH)
      combined_snippets = (atext.snippets + textexpander.snippets).uniq { |s| s[0] }
      
      # Next, create file content (CSV for aText, XML for TextExpander)
      # that contains the correct data:
      #   1. aText CSV should contain any new TextExpander snippets.
      #   2. TextExpander XML should contain original snippets *and*
      #      any new aText snippets.
      new_at_csv = atext.construct_data(combined_snippets - atext.snippets)
      new_te_xml = textexpander.construct_data(combined_snippets - textexpander.snippets)

      # Output the aText file.
      # File.write(options[:a] || ExpandSync::DEFAULT_AT_OUTPUT_PATH, new_at_csv)
      File.open(options[:a] || ExpandSync::DEFAULT_AT_OUTPUT_PATH, 'w') { |f| f.write(new_at_csv) }
    rescue StandardError => e
      ExpandSync::CLIMessage.error(e, false)
    end
  end

  description ExpandSync::DESCRIPTION
  version ExpandSync::VERSION
  
  # Flags & Switches
  on('-a FILEPATH', "Specify an output location for aText rules (default to...})")
  on('-t FILEPATH', 'Specify a location for the TextExpander iOS XML file')
  on('-v', '--verbose', 'Turn on verbose output')
  
  # Arguments
  arg :atext_filepath, 'The filepath to a CSV file exported from aText'

  go!
end
